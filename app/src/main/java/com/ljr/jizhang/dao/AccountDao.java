package com.ljr.jizhang.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ljr.jizhang.bean.Account;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACCOUNT".
*/
public class AccountDao extends AbstractDao<Account, Long> {

    public static final String TABLENAME = "ACCOUNT";

    /**
     * Properties of entity Account.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ClientName = new Property(1, String.class, "clientName", false, "CLIENT_NAME");
        public final static Property ProjectName = new Property(2, String.class, "projectName", false, "PROJECT_NAME");
        public final static Property ProjectDate = new Property(3, long.class, "projectDate", false, "PROJECT_DATE");
        public final static Property ProjectLocation = new Property(4, String.class, "projectLocation", false, "PROJECT_LOCATION");
        public final static Property ClientPhone = new Property(5, String.class, "clientPhone", false, "CLIENT_PHONE");
    };


    public AccountDao(DaoConfig config) {
        super(config);
    }
    
    public AccountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACCOUNT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CLIENT_NAME\" TEXT," + // 1: clientName
                "\"PROJECT_NAME\" TEXT," + // 2: projectName
                "\"PROJECT_DATE\" INTEGER NOT NULL ," + // 3: projectDate
                "\"PROJECT_LOCATION\" TEXT," + // 4: projectLocation
                "\"CLIENT_PHONE\" TEXT);"); // 5: clientPhone
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACCOUNT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Account entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String clientName = entity.getClientName();
        if (clientName != null) {
            stmt.bindString(2, clientName);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(3, projectName);
        }
        stmt.bindLong(4, entity.getProjectDate());
 
        String projectLocation = entity.getProjectLocation();
        if (projectLocation != null) {
            stmt.bindString(5, projectLocation);
        }
 
        String clientPhone = entity.getClientPhone();
        if (clientPhone != null) {
            stmt.bindString(6, clientPhone);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Account entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String clientName = entity.getClientName();
        if (clientName != null) {
            stmt.bindString(2, clientName);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(3, projectName);
        }
        stmt.bindLong(4, entity.getProjectDate());
 
        String projectLocation = entity.getProjectLocation();
        if (projectLocation != null) {
            stmt.bindString(5, projectLocation);
        }
 
        String clientPhone = entity.getClientPhone();
        if (clientPhone != null) {
            stmt.bindString(6, clientPhone);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Account readEntity(Cursor cursor, int offset) {
        Account entity = new Account( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // clientName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // projectName
            cursor.getLong(offset + 3), // projectDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // projectLocation
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // clientPhone
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Account entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClientName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProjectName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProjectDate(cursor.getLong(offset + 3));
        entity.setProjectLocation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setClientPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Account entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Account entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
